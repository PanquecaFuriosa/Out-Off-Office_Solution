CREATE TABLE EMPLOYEE (
    ID MEDIUMINT NOT NULL AUTO_INCREMENT,
    FULLNAME VARCHAR(64) NOT NULL, 
    SUBDIVISION VARCHAR(32) NOT NULL, 
    POSITION VARCHAR(16) NOT NULL, 
    STATUS_EMP VARCHAR(8) NOT NULL CHECK (STATUS_EMP IN ('Active', 'Inactive')), 
    HR_PARTNER MEDIUMINT NOT NULL DEFAULT 1, 
    PM_PARTNER MEDIUMINT, 
    OUT_OF_OFFICE_BALANCE INT NOT NULL,
    PHOTO TEXT,
    PRIMARY KEY (ID),
    FOREIGN KEY (HR_PARTNER) REFERENCES EMPLOYEE (ID),
    FOREIGN KEY (PM_PARTNER) REFERENCES EMPLOYEE (ID)
);

CREATE TABLE LEAVE_REQUEST (
    ID MEDIUMINT NOT NULL AUTO_INCREMENT,
    EMPLOYEE MEDIUMINT NOT NULL,
    ABSENCE_REASON VARCHAR(32) NOT NULL,
    INITIAL_DATE DATE NOT NULL,
    FINAL_DATE DATE NOT NULL,
    REQUEST_COMMENT TEXT,
    STATUS_REQUEST VARCHAR(32) NOT NULL DEFAULT "New",
    PRIMARY KEY (ID),
    FOREIGN KEY (EMPLOYEE) REFERENCES EMPLOYEE (ID) 
);

CREATE TABLE APPROVAL_REQUEST (
    ID MEDIUMINT NOT NULL AUTO_INCREMENT,
    HR_APPROVER MEDIUMINT NOT NULL,
    PM_APPROVER MEDIUMINT NOT NULL,
    ID_LEAVE_REQUEST MEDIUMINT NOT NULL,
    STATUS_REQUEST VARCHAR(32) NOT NULL DEFAULT "New",
    REQUEST_COMMENT TEXT,
    PRIMARY KEY (ID),
    FOREIGN KEY (HR_APPROVER) REFERENCES EMPLOYEE (ID),
    FOREIGN KEY (PM_APPROVER) REFERENCES EMPLOYEE (ID),
    FOREIGN KEY (ID_LEAVE_REQUEST) REFERENCES LEAVE_REQUEST (ID)  
);

CREATE TABLE PROJECT (
    ID MEDIUMINT NOT NULL AUTO_INCREMENT,
    PROJECT_TYPE VARCHAR(32) NOT NULL,
    INITIAL_DATE DATE NOT NULL,
    FINAL_DATE DATE,
    PROJECT_MANAGER MEDIUMINT NOT NULL,
    PROJECT_COMMENT TEXT,
    STATUS_PROJECT VARCHAR(8) NOT NULL CHECK (STATUS_PROJECT IN ('Active', 'Inactive')),
    PRIMARY KEY (ID),
    FOREIGN KEY (PROJECT_MANAGER) REFERENCES EMPLOYEE (ID)
);

CREATE TABLE PEOPLE_PROJECT (
    ID MEDIUMINT NOT NULL AUTO_INCREMENT,
    ID_PROJECT MEDIUMINT NOT NULL,
    ID_EMPLOYEE MEDIUMINT NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (ID_PROJECT) REFERENCES PROJECT (ID),
    FOREIGN KEY (ID_EMPLOYEE) REFERENCES EMPLOYEE (ID)
);

DELIMITER $$
CREATE TRIGGER trigger_employee_updated BEFORE UPDATE ON EMPLOYEE
FOR EACH ROW
BEGIN
    IF NEW.ID != OLD.ID THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Changing the employee ID is not allowed.';
    END IF;
END;
$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER trigger_leave_request_updated BEFORE UPDATE ON LEAVE_REQUEST
FOR EACH ROW
BEGIN
    IF NEW.ID != OLD.ID THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Changing the leave request ID is not allowed.';
    END IF;
END;
$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER trigger_approval_request_updated BEFORE UPDATE ON APPROVAL_REQUEST
FOR EACH ROW
BEGIN
    IF NEW.ID != OLD.ID THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Changing the approval request ID is not allowed.';
    END IF;
END;
$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER trigger_project_updated BEFORE UPDATE ON PROJECT
FOR EACH ROW
BEGIN
    IF NEW.ID != OLD.ID THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Changing the project ID is not allowed.';
    END IF;
END;
$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER trigger_project_assign BEFORE UPDATE ON PEOPLE_PROJECT
FOR EACH ROW
BEGIN
    IF NEW.ID != OLD.ID THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Changing the assignments ID is not allowed.';
    END IF;
END;
$$
DELIMITER ;


INSERT INTO EMPLOYEE (FULLNAME, SUBDIVISION, POSITION, STATUS_EMP, OUT_OF_OFFICE_BALANCE) VALUES ("Maite Gilabert", "Subdivision1", "Human Resource", "Active", 10);
